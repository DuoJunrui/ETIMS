# 端口及访问路径设置
server.port=8081
server.servlet.context-path=/etims
# spring.mvc.view.prefix=/static/
# spring.mvc.view.suffix=.html

# 数据库配置
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/etims_database?serverTimezone=UTC&allowMultiQueries=true&useSSL=false
spring.datasource.username=root
spring.datasource.password=123456

# Mybatis扫描路径配置
mybatis.type-aliases-package=cn.duojunrui.etims.entity
mybatis.mapper-locations=classpath:mybatis.mapper/*.xml

# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
spring.datasource.initialSize=5
# 最小连接池数量
spring.datasource.minIdle=5
# 最大连接池数量
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
# 连接等待超时时间 单位为毫秒 缺省启用公平锁
# 并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁
spring.datasource.use-unfair-lock=true
# 用来检测是否有效的sql
spring.datasource.validationQuery=SELECT 1 FROM DUAL
# 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，
# 如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.testWhileIdle=true
# 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能
spring.datasource.testOnBorrow=false
# 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能
spring.datasource.testOnReturn=false
# 打开PSCache,并指定每个连接的PSCache大小启用poolPreparedStatements后，
# PreparedStatements 和CallableStatements 都会被缓存起来复用，
# 即相同逻辑的SQL可以复用一个游标，这样可以减少创建游标的数量。
spring.datasource.pool-prepared-statements=true
spring.datasource.max-open-prepared-statements=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall,log4j
# 慢SQL记录
spring.datasource.logSlowSql=true
# 控制台显示SQL
logging.level.cn.duojunrui.etims.mapper = debug
# 格式化Json
spring.jackson.serialization.indent-output=true